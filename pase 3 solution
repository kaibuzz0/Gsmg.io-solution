import itertools
import base64
from Crypto.Cipher import AES
from Crypto.Hash import SHA256
from Crypto.Protocol.KDF import PBKDF1

# === EMBEDDED ENCRYPTED PHASE 3 BLOB (Base64-encoded) ===
BLOB_B64 = """
U2FsdGVkX1+fvEUdE9Bx9PEoh9S5BL77RFkkuplFwBY52doe9xSOIBsqC8uhFp8P
rj7i3hwS5hrk9cL7HBsXIYznEU4WcPg1/JB80oXc62IZMvJe9yU3XraLQobpMM8u
AncIoZg6cavQVwykoMoEvd9RSX2tADsHubgQJtb3XQS5IEOS3LAKomlZ1IcJL2Ct
EeUD1Pet+wD5XHcDwc2S55HsiVn3Nm6CyYuUR3fCwby9XIcV16ZKdxPTvqZ/zEOm
hmbDN1+GoY6xhpU1/Gv7qViMmAx4XYVnZ/nAjrylA3cS6TYtDR7d53p+LZOUms2N
WO2DOy70t5M98slze5WcWJToSEfaRkJ/mpTTaf0OLEYG2WgKbfzesqjSJVkmBkuL
hDliIs+MyZbmpLKSyNWlsWfYiGd4I1AyNJiZ0P45gxi6ISfBgyimX3qPYLSv0xxI
ZgGR3yT5o59lC/ulpr1EfBuZosyQQRKIUTAUTC0DOwBwG9sWh+jFv+/buSRftlEO
HOOuH2K/ikK3Mtw2jSqAtT131nxUBFVsozwoQyOVK3H2XE3xi/qFeB0v+2V4LWd4
6tFnvhJJfsyK5HaWlrR74BFeMXnf+rH8VMZwQ+5yxmn4uxYFTTB2qNqo359nb/mn
I2m4Lstrdz9Dq9Y7ROwh2QdFmbdeW42+37He31T8rholoJncpOR8RvLNIx3BzIbU
eyU3x2Y3IOAPaeCmXJS5XBZFaG9SGH1Mggc2YNiV1BwbNg6CS4YN+6R598G8BMJb
VTZU24YPscFTULSUAbnfIT46K/M16HdXV9tl75bLrvrE3NOTEzOb/1kRNDlbXf9A
M5LTajVrA4j2R+7tmnjk+7bAmazjSSDC3fXBlTIuFs39IKH2yqE1Csm/QKBdfHnv
96F4sgFK3C/IxCrtZaI/7K5+pUqHemFj8M7oa2eIlp1Q3q6NshVY7mx24ikY/yKp
6Nb4PVyQazksXLigwh3xPEXGMUwQXE4lQQb6YHw2oqZ6W+46OPXrzQwrBrGmeZwF
KOx6eulo+cUqxjMgKk8wXkRm+wJRVAB7iDK05rdupKr5K0vxhZrpRUFlZ6K0tS4B
OAaN1AyV9VfxopZrHTofvJQJcow0+kM7kR44qIEcpc6+qQRKFTerTt7F29PgJtW/
VuBrQOfQ8ybUktCX7UQilgOZvgE6MzLhC4VKysGky2oSSRKm2AYiBySEOm4MRBpu
UeBnPSKGv0g2Z/yed1kqeWOmAJkYbM1mSrswO3FTJ2Z87qb461zexdDtXTOYnKfr
kEf4FGO8T3NtZaWaCC1LAhsPX6mtWkDGLp5Y4drQTQUPCenu30eRL857zWRyK4o0
X0a2nnusCQImNgCl75fme7dT7ArqZeI7zjSEq88wCJaVl6Vj7DDDaDR+kr27IuYR
3cTkoH8Xu4Il35LS1vv1w0JSIaah4K9QNpq3GPcT4RqO4umkbKM/YImcC2Y3XxW/
18TG/2bWQQRAub09w0n5/q6cd+5D9a3i7w/iJqpHY7J7p2yVkpAnCtu3/LAosdTR
f+AvPAYXEONnInRKjGQPUTI8IeS74ggOfHW+o8FveIHR7aSrBpiTPUv/MVENNSro
UTQyjOe8DUIxcKL3srXsdIeHbGGY9Gj5/XtyoZPJ7UdtmQ9jPjBXGCMOiwAudRy0
gVezV4lot4g07bDsD+W4TJOjWZlU7tbT9o54XZDrJb0EYKs53QeCMwtNZr0na+jO
IlVJeUSqdIlc/Xhof7Tywws57jvNkQ5CTLb2eNAreGDKHHQRaNfnMPNJGw7smd+Y
0felG+LPaVNR/vYc7kD5kkUbhyIVYplO19AmRGq6qbnVvh6BeSo56QV45HI0494D
zeVGjDfViroNwoPPXwLof7KQ0nuNPnLSQLp2lwmsTcez2TXUpuzxxyZXKB9EjkGt
juHpet31qtghgp8AjzI7u20/WcxvvM7gmhM2irkKlm7l6l0liOVX2FpyNHL+xnyp
5mg54quAXWnw8F8o3hbQ6Xip41bdDdorkTn9IjTKCiI3d4d67EWfTzsnSQB3IGnq
St16HtnzQWudZdc+cKwtel6ul1O7m/rMrsndRooM79fX8UtsY0TsIKhWlIJor8a9
epjyLx00cLzJe+C7bzftOtoSBTDcxugb4j+PvxMwAvMPuZNwcd7WIOpPAWxiVje+
NlaHsp/Vd4oNobNt5gr6TDLc3PcBe2F1RiJb3s8WkqFRIW3ruvl6RynbAq9QvwIS
o2oMVoYVXWkb00kBzHU8mUUbjVS1QbzberBuNzKstFETJ7O0tHrccXf8VY9uRnw8
ELsJasf3FobxHjBPdIwr9EslQiST7pfF5yh32bJ19yWV/CGnmm78MjeqLjX2LI1N
LGiwwZDwuor2ZlCazfreK1vIw3BBdRLY/3NWEyHp0QMZoSgEzunfUqdvDog61T3n
qgWIreQyou1SqN6FtkVe5SS3t0+piag18/LnCrj1yb5nv+OATgbutwYijQ7vze6D
RQNOoh32us8JGK2g8VSsqpEwFtrqxmMjPKss5uMx33Gy4MIcd/9g17Ua3JXJlA2r
98+aork3OMRLh/ViC3CfPXOkyZL28Rb8O8TSjqai+q2wzBtYgjxDSs+Wpxu8SSHr
Ee++IBaCFOGg7BAydqu+2Ez25aLt2yee1nUv4M20D9vQi1h9WVkcO6cpCJFi0i0m
v1Ib8kXhLqh8bf9amyqY1W/fyWmfiYlf7bW5G9ggZkQQVqOK70ZFAjgkP2SWeGvo
GTwUJUQo8KibjHZZ1rBcYT9h/N3JeJV9ipbgrIynv/96yiiSIPAb2VS2gyMezExo
d2Yi5v6Ht4kqj7g+GsHPoHakkR5gv+xZmK6IhCH/c8UJOGpYJ4fr46WkyAMjBdQw
2JeJxca8K9DM8fmQxK33RpwIOgWYbmhaRnYTOoJcr2MHc8FeBflizAt+4aUxA0xI
bJveZ7LXNPEpktlAnsCSYyovVK6bNrpB7kuiu4CwydyyK96vsCGn2Bb3MY3r2ZGP
AY7uvTavRhBb+gf2bryP9VEmJ7YGfxxmpdW4Izj5bLfNG0z/FGkbkVh8kDDyL3fa
gIVzy/fEGoEamRaKXTgdhSUuiNN2Xx/MJMpRMaVofQ+WIFa0mxuMZCJ15qy7wiUO
GYiozRXndlwrB7mbQigatfGNngRTVU4+J4iXOqrSAVpE5g7Dn9aK2h3oBksQRg45
KY+JtrxuIXtfSLe6RXWC1T+yO1W7W4OoYnTZ9iOxGHUCuxSFx/SJVy0nbXiNv2E1
/ple69QaK333ZJaebxa7RKKZGPAXkDWszyoY5w/TrBc0Es+2tgcGNGo0QA7rk1U5
TzDlN0Dfle6QyShSnaoicmN+4RPrA0QYervKtFX9aFpsU4XRO8ikDwp6oy7XiXtk
NSrTBXD7OVfdJjX8gsgLj9UVuOOzY2X1vmd/FXZ2HxfFHhiC8Bn8KClEFOTbK2eM
h+0znKD1eKJai1YP1eyM/9zT0jlmKGuuegNIovYyCWHUBsj60s2Sph37GSD3D4x2
lSDoxfbSdh1nkSiZnixiu8iTFj8moH2NrMvlredar78N6MoXW6mN9lepl4c2J5MB
I271svOfKmJeXfEbmIGfcE1sItSN6sf5FmTVhUjRMVPVEUeM5qNJtfWOy2FLmcIX
Smegm+IQs4yufyU+ea/3ITs7cDaGx4cFaAx+bOgIyp5I6VikFL33DXpEjXYGhkuf
J25AhBOKweD1Xy6/+AIElbGPA9nc2loT0x9r/sFz4F92aCuPzaAh5tF7KyAbDmqw
1KWKxgMPWfJBxaE17A6XAB9DFG5REbF6lJCkBTpT6JN3eqqIdOGf5EP1QuJVgpls
soFL9StB7y06qWo9K3jl0w6O80Dwd9bKfNs19/aq1ufuBhkVovkfb8uKcb0DK/GG
mJu2sO+OkSU1xG0gOfSUTBcQSGydmR14znXz90/pkPonmKPcQ3IV8hdUJrmOCNSe
PWLFI7Ws2O0lrc8pKbegt1xfPe7jEz9M7UirDvJ+JHOSeQTaCy9FusHXaofdLxvJ
q+a1S5EWAH2UkviTYmnqlL5r6G3QB5jP9uaIBeg1TGCRIANCcEItDsLyCCcNF/es
cEUCmXzmiL8vzCsRdFMsl6Fn3nnXERfxoVnhOFhvAxzazOX/+EE0cIe3KrZAtLpo
hr98dwyxio20iUrYg8LhX8/v+vU6Xj9uXagviJwao61abmnARqRyj/5HKaE67Hit
P0DxpURE7KHMS/Xr5IVp4KshS/P8glqi94XvNx2XVnPfxaIEA+N60p8V4JgZjkFL
L07+afeZGSkfcrAdGQzot8OTbZz3MALe67+Ntyoo3z1ou66cI0g7KF7jwfyy6he5
3ht4NibjmfYoWZvqibJSQgK3AZJYOhCdelgEK8GknW30GdmU+OiJVJ7A8L5B6kec
4aec1pKYbpJ6FhsJiwL9LpHW3rr4NwNfOvPaoWlXJVaU04IIcAA2D/4AG/aTxa3/
QCnxZWwZxV5SqV/3dW0PS93wyWSGjMBdGMulO4NVnOoAROOcVz9/IJf4CzYmxGmz
s6Jl8kF59XbXTiRSRUqQMkOGjzMZ0I25XFyXsrXpGz7AvD6rYEHr/wimX9zGf+25
DKpp3dbOzgiD7X+YJ4MOf+QMT9dIt7IBNjdEf3iSwwpHzoy0vXNecxjXq0Fe+0dp
DKzlPWN8hHO/67CcbvAZGD9dHW3QeHvKtbPV/KYGo1Y6wxKoWxVSiccIaCyDgSKA
HOClBza+l62kplCgOkN4lGRCgg/d8VdKNa8eAUehjA5O9YBnslQKe1pnA2W+G3Pr
iBXAHQHSRgt6DqLOs8cbsLT6sH471useAJ3qZs1+7shlLtFEMLy6JyGyaHXB8Ywj
mV5bHwu+ESlcA618i1YbB7Xk3NhUZcSdL4fMSTfiMfiFX6qPZwX4eyi2G3zTodnZ
YY47pm2tDHBkhXe1c4Q/cXTNL0XVCRMbrXbDeh/m+W3QRhSMus9s48RO5nQslQwx
PwbL9DfIlRQRoFQlACBBZWfXkFOUsyyG6VNtQe1d63SX2uLKj9qHMmSvGnAKvv4s
gvHpEFXA6Jxrx5XMbNQbdSYVDlgHf0lsaZlxqeH/lYYYlv2MUdqZjR+p/sjKO3M3
vPzfxqc/Iyp7lMJvgr3ukUJvNAlmBbrdMtt2T/SQUXKwIa3x97Gh2bw8EZv5A8ss
eoOQOIDFwvdpJ33mb09roLBZbS9ZWrQewSPpmJD7fc9p9MN9+BgVdXItTc25YxxH
IQI5MoCLzNgQwJgXUZFcC41y++XK+/ww2ce3Ve6qZWDpQupmkkQTfr5wz9YOieiH
GWeydQsj7ALHpEbANHsHpGStSLQJWkxMYHl+C0ZVWJVsqX0iRCfr5kgP0BYNYTuu
JAL1ByhzRHoHunVNpPxLNQh2b2vyML5KxCaoV/fGr1Gm0g31X7fIYg6upYgYnePd
451Qxr+inzLrIu7F8LCeVPoPllCcbzSWNCokIQCDr54=
"""

# === KNOWN SEGMENTS (unordered) ===
segments = [
    "matrixsumlist",
    "lastwordsbeforearchichoice",
    "jacquefractal",
    "FFGPFGGQG3GNpjk6"
]

# === PREPARE ENCRYPTED DATA ===
encrypted_data = base64.b64decode("".join(BLOB_B64.strip().splitlines()))

assert encrypted_data[:8] == b'Salted__', "Missing salt header"
salt = encrypted_data[8:16]
ciphertext = encrypted_data[16:]

# === BRUTE FORCE ===
for i, perm in enumerate(itertools.permutations(segments)):
    password = ''.join(perm)
    key_iv = PBKDF1(password.encode(), salt, 32 + 16, 1000, SHA256)
    key = key_iv[:32]
    iv = key_iv[32:]

    cipher = AES.new(key, AES.MODE_CBC, iv)
    try:
        decrypted = cipher.decrypt(ciphertext)
        if b"::==DATA_BLOCK_START==::" in decrypted:
            print(f"\nâœ… Match found! Permutation #{i+1}: {password}\n")
            print(decrypted.decode(errors="replace"))
            break
    except Exception:
        continue